var N = null;var searchIndex = {};
searchIndex["slice_deque"]={"doc":"A double-ended queue that `Deref`s into a slice.","items":[[3,"Buffer","slice_deque","Mirrored memory buffer of length `len`.",N,N],[3,"SliceDeque","","A double-ended queue that derefs into a slice.",N,N],[3,"Drain","","A draining iterator for `SliceDeque<T>`.",N,N],[3,"IntoIter","","An iterator that moves out of a deque.",N,N],[3,"Splice","","A splicing iterator for `SliceDeque`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on `SliceDeque`.",N,N],[11,"len","","Number of elements in the buffer.",0,[[["self"]],["usize"]]],[11,"is_empty","","Is the buffer empty?",0,[[["self"]],["bool"]]],[11,"ptr","","Pointer to the first element in the buffer.",0,N],[11,"as_slice","","Interprets contents as a slice.",0,N],[11,"as_mut_slice","","Interprets contents as a mut slice.",0,N],[11,"get","","Interprets content as a slice and access the `i`-th element.",0,[[["self"],["usize"]],["t"]]],[11,"get_mut","","Interprets content as a mut slice and access the `i`-th element.",0,[[["self"],["usize"]],["t"]]],[11,"new","","Creates a new empty `Buffer`.",0,[[],["self"]]],[11,"from_raw_parts","","Creates a new empty `Buffer` from a `ptr` and a `len`.",0,N],[11,"uninitialized","","Create a mirrored buffer containing `len` `T`s where the first half of the buffer is mirrored into the second half.",0,[[["usize"]],["result"]]],[11,"drop","","",0,[[["self"]]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"default","","",0,[[],["self"]]],[11,"new","","Creates a new empty deque.",1,[[],["self"]]],[11,"from_raw_parts","","Creates a SliceDeque from its raw components.",1,N],[11,"with_capacity","","Create an empty deque with capacity to hold `n` elements.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements that the deque can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"len","","Number of elements in the ring buffer.",1,[[["self"]],["usize"]]],[11,"is_full","","Is the ring buffer full ?",1,[[["self"]],["bool"]]],[11,"as_slice","","Extracts a slice containing the entire deque.",1,N],[11,"as_mut_slice","","Extracts a mutable slice containing the entire deque.",1,N],[11,"as_slices","","Returns a pair of slices, where the first slice contains the contents of the deque and the second one is empty.",1,N],[11,"as_mut_slices","","Returns a pair of slices, where the first slice contains the contents of the deque and the second one is empty.",1,N],[11,"tail_head_slice","","Returns the slice of uninitialized memory between the `tail` and the `head`.",1,N],[11,"reserve","","Reserves capacity for inserting at least `additional` elements without reallocating. Does nothing if the capacity is already sufficient.",1,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `SliceDeq<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",1,[[["self"],["usize"]]]],[11,"move_head_unchecked","","Moves the deque head by `x`.",1,[[["self"],["isize"]]]],[11,"move_head","","Moves the deque head by `x`.",1,[[["self"],["isize"]]]],[11,"move_tail_unchecked","","Moves the deque tail by `x`.",1,[[["self"],["isize"]]]],[11,"move_tail","","Moves the deque tail by `x`.",1,[[["self"],["isize"]]]],[11,"steal_from_slice","","Steal the elements from the slice `s`. You should `mem::forget` the slice afterwards.",1,N],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",1,[[["self"],["self"]]]],[11,"front","","Provides a reference to the first element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the first element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"back","","Provides a reference to the last element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the last element, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"push_front","","Prepends `value` to the deque.",1,[[["self"],["t"]]]],[11,"push_back","","Appends `value` to the deque.",1,[[["self"],["t"]]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the deque is empty.",1,[[["self"]],["option"]]],[11,"pop_back","","Removes the last element from the deque and returns it, or `None` if it is empty.",1,[[["self"]],["option"]]],[11,"shrink_to_fit","","Shrinks the capacity of the deque as much as possible.",1,[[["self"]]]],[11,"truncate_back","","Shortens the deque by removing excess elements from the back.",1,[[["self"],["usize"]]]],[11,"truncate","","Shortens the deque by removing excess elements from the back.",1,[[["self"],["usize"]]]],[11,"truncate_front","","Shortens the deque by removing excess elements from the front.",1,[[["self"],["usize"]]]],[11,"clear","","Removes all values from the deque.",1,[[["self"]]]],[11,"swap_remove_back","","Removes the element at `index` and return it in `O(1)` by swapping the last element into its place.",1,[[["self"],["usize"]],["option"]]],[11,"swap_remove_front","","Removes the element at `index` and returns it in `O(1)` by swapping the first element into its place.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an `element` at `index` within the deque, shifting all elements with indices greater than or equal to `index` towards the back.",1,[[["self"],["usize"],["t"]]]],[11,"remove","","Removes and returns the element at position `index` within the deque, shifting all elements after it to the front.",1,[[["self"],["usize"]],["t"]]],[11,"split_off","","Splits the collection into two at the given index.",1,[[["self"],["usize"]],["self"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the deque that resolve to the same key.",1,[[["self"],["f"]]]],[11,"dedup_by","","Removes all but the first of consecutive elements in the deque satisfying a given equality relation.",1,[[["self"],["f"]]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",1,[[["self"],["f"]],["drainfilter"]]],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `SliceDeque`.",1,N],[11,"resize","","Modifies the `SliceDeque` in-place so that `len()` is equal to `new_len`, either by removing excess elements or by appending clones of `value` to the back.",1,[[["self"],["usize"],["t"]]]],[11,"resize_default","","Resizes the `SliceDeque` in-place so that `len` is equal to `new_len`.",1,[[["self"],["usize"]]]],[11,"dedup","","Removes consecutive repeated elements in the deque.",1,[[["self"]]]],[11,"remove_item","","Removes the first instance of `item` from the deque if the item exists.",1,[[["self"],["t"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"drop","","",1,[[["self"]]]],[11,"deref","","",1,N],[11,"deref_mut","","",1,N],[11,"default","","",1,[[],["self"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"from","","",1,N],[11,"from","","",1,N],[11,"hash","","",1,[[["self"],["h"]]]],[11,"eq","","",1,[[["self"],["slicedeque"]],["bool"]]],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,[[["self"],["vec"]],["bool"]]],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"eq","","",1,N],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"partial_cmp","","",1,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",3,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",3,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"count","","",3,[[["self"]],["usize"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"drop","","",3,[[["self"]]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the deque (from start to end). The deque cannot be used after calling this.",1,[[["self"]],["intoiter"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"drop","","",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"drop","","",5,[[["self"]]]],[11,"as_ref","","",1,N],[11,"as_mut","","",1,N],[14,"sdeq","","Creates a [`SliceDeque`] containing the arguments.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into_iter","","",4,[[["self"]],["i"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]]],"paths":[[3,"Buffer"],[3,"SliceDeque"],[3,"Drain"],[3,"IntoIter"],[3,"Splice"],[3,"DrainFilter"]]};
initSearch(searchIndex);
